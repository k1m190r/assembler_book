     1                                  ;alive2
     2                                  
     3                                  ;###########################################
     4                                  ; CONST & MACRO
     5                                  
     6                                  nil equ 0
     7                                  nl equ 10
     8                                  
     9                                  %define NLL nl,nil
    10                                  
    11                                  %macro PROLO 0
    12                                  push rbp
    13                                  mov rbp, rsp
    14                                  %endmacro
    15                                  
    16                                  %macro EPILO 0
    17                                  mov rsp, rbp
    18                                  pop rbp
    19                                  %endmacro
    20                                  
    21                                  %macro EXIT0 0
    22                                  mov rax, 60 ; exit
    23                                  mov rdi, 0 ; exit code
    24                                  syscall
    25                                  %endmacro
    26                                  
    27                                  ; ######################
    28                                  ; PRINTF MACROS
    29                                  
    30                                  extern printf
    31                                  
    32                                  ; print_string format 1xstring
    33                                  %macro prs 2
    34                                  xor rax, rax
    35                                  mov rdi, %1 ; fmt
    36                                  mov rsi, %2 ; msg
    37                                  call printf
    38                                  %endmacro
    39                                  
    40                                  ; print_int format 1xint
    41                                  %macro pri 2
    42                                  xor rax, rax
    43                                  mov rdi, %1 ; fmt
    44                                  mov rsi, [%2] ; int
    45                                  call printf
    46                                  %endmacro
    47                                  
    48                                  ; print_float format 1xfloat
    49                                  %macro prf 2
    50                                  mov rax, 1
    51                                  mov rdi, %1 ; fmt
    52                                  movq xmm0, [%2] ; float
    53                                  call printf
    54                                  %endmacro
    55                                  
    56                                  
    57                                  ;#####################################
    58                                  ; SECTIONS
    59                                  
    60                                  section .data
    61                                  
    62 00000000 68656C6C6F20776F72-     msg1  db "hello world", nil
    62 00000009 6C6400             
    63 0000000C 416C69766520616E64-     msg2 db "Alive and kicking", nil
    63 00000015 206B69636B696E6700 
    64                                  
    65 0000001E 6501000000000000        rad dq 357
    66 00000026 A7E8482EFF210940        pi dq 3.1416
    67                                  
    68 0000002E 25730A00                fmt_str db "%s",NLL
    69 00000032 256C660A00              fmt_flt db "%lf",NLL
    70 00000037 25640A00                fmt_int db "%d",NLL
    71                                  
    72 0000003B 7B                      b1 db 123
    73 0000003C 3930                    w1 dw 12345
    74 0000003E D2029649                d1 dd 1234567890
    75 00000042 1581E97DF4102211        q1 dq 1234567890123456789
    76 0000004A 40E2010000000000        q2 dq 123456
    77 00000052 A7E8482EFF210940        q3 dq 3.1416
    78                                  
    79                                  section .bss
    80                                  
    81                                  ; #############################
    82                                  ; # CODE
    83                                  
    84                                  section .text
    85                                  
    86                                  global main
    87                                  
    88                                  main:
    89                                  PROLO
    89 00000000 55                  <1> push rbp
    89 00000001 4889E5              <1> mov rbp, rsp
    90                                  
    91                                  ; manipulations
    92 00000004 48C7C0FFFFFFFF          mov rax, -1 ; all 1s
    93 0000000B 8A0425[3B000000]        mov al, byte[b1] ; set lover byte
    94 00000012 4831C0                  xor rax, rax ; clear rax
    95 00000015 8A0425[3B000000]        mov al, byte[b1] ; set lower byte
    96                                  
    97 0000001C 48C7C0FFFFFFFF          mov rax, -1
    98 00000023 668B0425[3C000000]      mov ax, word[w1]
    99 0000002B 4831C0                  xor rax, rax
   100 0000002E 668B0425[3C000000]      mov ax, word[w1]
   101                                  
   102 00000036 48C7C0FFFFFFFF          mov rax, -1
   103 0000003D 8B0425[3B000000]        mov eax, dword[b1]
   104                                  
   105 00000044 48C7C0FFFFFFFF          mov rax, -1
   106 0000004B 488B0425[42000000]      mov rax, qword[q1]
   107 00000053 48890425[4A000000]      mov qword[q2], rax
   108 0000005B B840E20100              mov rax, 123456
   109                                  
   110 00000060 F30F7E0425-             movq xmm0, [q3]
   110 00000065 [52000000]         
   111                                  
   112                                  ; write stdout msg len(msg)
   113                                  prs fmt_str, msg1
   113 00000069 4831C0              <1> xor rax, rax
   113 0000006C 48BF-               <1> mov rdi, %1
   113 0000006E [2E00000000000000]  <1>
   113 00000076 48BE-               <1> mov rsi, %2
   113 00000078 [0000000000000000]  <1>
   113 00000080 E8(00000000)        <1> call printf
   114                                  prs fmt_str, msg2
   114 00000085 4831C0              <1> xor rax, rax
   114 00000088 48BF-               <1> mov rdi, %1
   114 0000008A [2E00000000000000]  <1>
   114 00000092 48BE-               <1> mov rsi, %2
   114 00000094 [0C00000000000000]  <1>
   114 0000009C E8(00000000)        <1> call printf
   115                                  pri fmt_int, rad
   115 000000A1 4831C0              <1> xor rax, rax
   115 000000A4 48BF-               <1> mov rdi, %1
   115 000000A6 [3700000000000000]  <1>
   115 000000AE 488B3425[1E000000]  <1> mov rsi, [%2]
   115 000000B6 E8(00000000)        <1> call printf
   116                                  prf fmt_flt, pi
   116 000000BB B801000000          <1> mov rax, 1
   116 000000C0 48BF-               <1> mov rdi, %1
   116 000000C2 [3200000000000000]  <1>
   116 000000CA F30F7E0425-         <1> movq xmm0, [%2]
   116 000000CF [26000000]          <1>
   116 000000D3 E8(00000000)        <1> call printf
   117                                  
   118                                  EPILO
   118 000000D8 4889EC              <1> mov rsp, rbp
   118 000000DB 5D                  <1> pop rbp
   119                                  EXIT0
   119 000000DC B83C000000          <1> mov rax, 60
   119 000000E1 BF00000000          <1> mov rdi, 0
   119 000000E6 0F05                <1> syscall
   120                                  
   121                                  ;main:
   122                                  
