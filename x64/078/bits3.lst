     1                                  ; bits3
     2                                  
     3                                  ; nl nil nll PROLO EPILO EXIT0 PRS PRI PRF
     4                                  %include "../inc/common.inc"
     1                              <1> ; ################################
     2                              <1> ; n Ã— {extern global push}
     3                              <1> 
     4                              <1> %macro NEXTERN 1-*
     5                              <1> %rep %0 
     6                              <1>     extern %1
     7                              <1> %rotate 1
     8                              <1> %endrep
     9                              <1> %endmacro
    10                              <1> 
    11                              <1> %macro NGLOB 1-*
    12                              <1> %rep %0 
    13                              <1>     global %1
    14                              <1> %rotate 1
    15                              <1> %endrep
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro NPUSH 1-*
    19                              <1> %rep %0
    20                              <1>     push %1
    21                              <1> %rotate 1
    22                              <1> %endrep
    23                              <1> %endmacro
    24                              <1> 
    25                              <1> ;###########################################
    26                              <1> ; Constants, Essential macros
    27                              <1> 
    28                              <1> nil equ 0
    29                              <1> nl equ 10
    30                              <1> 
    31                              <1> %define NLL nl,nil
    32                              <1> 
    33                              <1> %macro PROLO 0
    34                              <1>     push rbp
    35                              <1>     mov rbp, rsp
    36                              <1> %endmacro
    37                              <1> 
    38                              <1> %macro EPILO 0
    39                              <1>     mov rsp, rbp
    40                              <1>     pop rbp
    41                              <1>     ret
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro MAIN_EPILO_EXIT0 0
    45                              <1>     mov rsp, rbp
    46                              <1>     pop rbp
    47                              <1>     mov rax, 60 ; exit
    48                              <1>     xor rdi, rdi ; exit code 0
    49                              <1>     syscall
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> ; ######################
    53                              <1> ; PRINTF
    54                              <1> 
    55                              <1> extern printf
    56                              <1> 
    57                              <1> ; ############################
    58                              <1> ; Prints
    59                              <1> 
    60                              <1> ; print non floats fmt v1
    61                              <1> %macro PR1 2
    62                              <1>     mov rdi, %1 ; fmt
    63                              <1>     mov rsi, %2 ; var1
    64                              <1>     xor rax, rax
    65                              <1>     call printf
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> ; print non floats fmt v1 v2
    69                              <1> %macro PR2 3
    70                              <1>     mov rdi, %1 ; fmt
    71                              <1>     mov rsi, %2 ; var1
    72                              <1>     mov rdx, %3 ; var2
    73                              <1>     xor rax, rax
    74                              <1>     call printf
    75                              <1> %endmacro
    76                              <1> 
    77                              <1> ; print non floats fmt v1 v2 v3
    78                              <1> %macro PR3 4
    79                              <1>     mov rdi, %1 ; fmt
    80                              <1>     mov rsi, %2 ; var1
    81                              <1>     mov rdx, %3 ; var2
    82                              <1>     mov rcx, %4 ; var3
    83                              <1>     xor rax, rax
    84                              <1>     call printf
    85                              <1> %endmacro
    86                              <1> 
    87                              <1> 
    88                              <1> ; #################################
    89                              <1> ; Floats
    90                              <1> 
    91                              <1> ; expecting xmm0..%2 with value(s)
    92                              <1> %macro PRFX 2
    93                              <1>     mov rdi, %1 ; fmt
    94                              <1>     mov rax, %2 ; %2 floats
    95                              <1>     call printf
    96                              <1> %endmacro
    97                              <1> 
    98                              <1> ; print_float format 1 x float
    99                              <1> %macro PRF1 2
   100                              <1>     movsd xmm0, %2
   101                              <1>     PRFX %1, 1
   102                              <1> %endmacro
   103                              <1> 
   104                              <1> ; print_float format 2 x floats
   105                              <1> ; expecting xmm0,1 with value
   106                              <1> %macro PRF2 3
   107                              <1>     movsd xmm0, %2 ; float 1
   108                              <1>     movsd xmm1, %3 ; float 2
   109                              <1>     PRFX %1, 2
   110                              <1> %endmacro
   111                              <1> 
     5                                  
     6                                  NGLOB main
     6                              <1> %rep %0
     6                              <1>  global %1
     6                              <1> %rotate 1
     6                              <1> %endrep
     6                              <2>  global %1
     6                              <2> %rotate 1
     7                                  NEXTERN printb
     7                              <1> %rep %0
     7                              <1>  extern %1
     7                              <1> %rotate 1
     7                              <1> %endrep
     7                              <2>  extern %1
     7                              <2> %rotate 1
     8                                  
     9                                  ;#####################################
    10                                  ; SECTIONS
    11                                  
    12                                  section .data
    13                                  
    14 00000000 25730A00                    fmt db "%s", NLL
    15                                  
    16                                      %macro  NMSG 1-*
    17                                      %assign I 1
    18                                      %rep %0
    19                                          msg%[I] db %1, nil
    20                                  
    21                                          %assign I I+1
    22                                          %rotate 1
    23                                      %endrep
    24                                      %endmacro
    25                                  
    28                                      NMSG "No bits set:",          "Set #4:", "Set #7:", "Set #8:", "Set #61:",          "Clear #8:", "Test #61 show RDI:"
    28                              <1>  %assign I 1
    28                              <1>  %rep %0
    28                              <1>  msgI db %1, nil
    28                              <1> 
    28                              <1>  %assign I I+1
    28                              <1>  %rotate 1
    28                              <1>  %endrep
    28 00000004 4E6F20626974732073- <2>  msgI db %1, nil
    28 0000000D 65743A00            <2>
    28                              <2> 
    28                              <2>  %assign I I+1
    28                              <2>  %rotate 1
    28 00000011 5365742023343A00    <2>  msgI db %1, nil
    28                              <2> 
    28                              <2>  %assign I I+1
    28                              <2>  %rotate 1
    28 00000019 5365742023373A00    <2>  msgI db %1, nil
    28                              <2> 
    28                              <2>  %assign I I+1
    28                              <2>  %rotate 1
    28 00000021 5365742023383A00    <2>  msgI db %1, nil
    28                              <2> 
    28                              <2>  %assign I I+1
    28                              <2>  %rotate 1
    28 00000029 536574202336313A00  <2>  msgI db %1, nil
    28                              <2> 
    28                              <2>  %assign I I+1
    28                              <2>  %rotate 1
    28 00000032 436C6561722023383A- <2>  msgI db %1, nil
    28 0000003B 00                  <2>
    28                              <2> 
    28                              <2>  %assign I I+1
    28                              <2>  %rotate 1
    28 0000003C 546573742023363120- <2>  msgI db %1, nil
    28 00000045 73686F77205244493A- <2>
    28 0000004E 00                  <2>
    28                              <2> 
    28                              <2>  %assign I I+1
    28                              <2>  %rotate 1
    29                                  
    30 0000004F 0000000000000000            bitflags dq 0
    31                                  
    32                                  section .bss
    33                                  
    34                                  section .text
    35                                  
    36                                  ; #############################
    37                                  main:
    38                                  PROLO
    38 00000000 55                  <1>  push rbp
    38 00000001 4889E5              <1>  mov rbp, rsp
    39                                  
    40                                      %macro BTS_BTR 1-*
    41                                      %assign I 1
    42                                      %rep %0/2
    43                                          PR1 fmt, msg%[I]
    44                                          bt%[%1]  qword[bitflags], %2
    45                                          mov rdi, [bitflags]
    46                                          call printb
    47                                  
    48                                          %assign I I+1
    49                                          %rotate 2
    50                                      %endrep
    51                                      %endmacro 
    52                                  
    53                                      BTS_BTR r, 0, s, 4, s, 7, s, 8, s, 61, r, 8
    53                              <1>  %assign I 1
    53                              <1>  %rep %0/2
    53                              <1>  PR1 fmt, msgI
    53                              <1>  bt%1 qword[bitflags], %2
    53                              <1>  mov rdi, [bitflags]
    53                              <1>  call printb
    53                              <1> 
    53                              <1>  %assign I I+1
    53                              <1>  %rotate 2
    53                              <1>  %endrep
    53                              <2>  PR1 fmt, msgI
    53 00000004 48BF-               <3>  mov rdi, %1
    53 00000006 [0000000000000000]  <3>
    53 0000000E 48BE-               <3>  mov rsi, %2
    53 00000010 [0400000000000000]  <3>
    53 00000018 4831C0              <3>  xor rax, rax
    53 0000001B E8(00000000)        <3>  call printf
    53 00000020 480FBA3425-         <2>  bt%1 qword[bitflags], %2
    53 00000025 [4F000000]00        <2>
    53 0000002A 488B3C25[4F000000]  <2>  mov rdi, [bitflags]
    53 00000032 E8(00000000)        <2>  call printb
    53                              <2> 
    53                              <2>  %assign I I+1
    53                              <2>  %rotate 2
    53                              <2>  PR1 fmt, msgI
    53 00000037 48BF-               <3>  mov rdi, %1
    53 00000039 [0000000000000000]  <3>
    53 00000041 48BE-               <3>  mov rsi, %2
    53 00000043 [1100000000000000]  <3>
    53 0000004B 4831C0              <3>  xor rax, rax
    53 0000004E E8(00000000)        <3>  call printf
    53 00000053 480FBA2C25-         <2>  bt%1 qword[bitflags], %2
    53 00000058 [4F000000]04        <2>
    53 0000005D 488B3C25[4F000000]  <2>  mov rdi, [bitflags]
    53 00000065 E8(00000000)        <2>  call printb
    53                              <2> 
    53                              <2>  %assign I I+1
    53                              <2>  %rotate 2
    53                              <2>  PR1 fmt, msgI
    53 0000006A 48BF-               <3>  mov rdi, %1
    53 0000006C [0000000000000000]  <3>
    53 00000074 48BE-               <3>  mov rsi, %2
    53 00000076 [1900000000000000]  <3>
    53 0000007E 4831C0              <3>  xor rax, rax
    53 00000081 E8(00000000)        <3>  call printf
    53 00000086 480FBA2C25-         <2>  bt%1 qword[bitflags], %2
    53 0000008B [4F000000]07        <2>
    53 00000090 488B3C25[4F000000]  <2>  mov rdi, [bitflags]
    53 00000098 E8(00000000)        <2>  call printb
    53                              <2> 
    53                              <2>  %assign I I+1
    53                              <2>  %rotate 2
    53                              <2>  PR1 fmt, msgI
    53 0000009D 48BF-               <3>  mov rdi, %1
    53 0000009F [0000000000000000]  <3>
    53 000000A7 48BE-               <3>  mov rsi, %2
    53 000000A9 [2100000000000000]  <3>
    53 000000B1 4831C0              <3>  xor rax, rax
    53 000000B4 E8(00000000)        <3>  call printf
    53 000000B9 480FBA2C25-         <2>  bt%1 qword[bitflags], %2
    53 000000BE [4F000000]08        <2>
    53 000000C3 488B3C25[4F000000]  <2>  mov rdi, [bitflags]
    53 000000CB E8(00000000)        <2>  call printb
    53                              <2> 
    53                              <2>  %assign I I+1
    53                              <2>  %rotate 2
    53                              <2>  PR1 fmt, msgI
    53 000000D0 48BF-               <3>  mov rdi, %1
    53 000000D2 [0000000000000000]  <3>
    53 000000DA 48BE-               <3>  mov rsi, %2
    53 000000DC [2900000000000000]  <3>
    53 000000E4 4831C0              <3>  xor rax, rax
    53 000000E7 E8(00000000)        <3>  call printf
    53 000000EC 480FBA2C25-         <2>  bt%1 qword[bitflags], %2
    53 000000F1 [4F000000]3D        <2>
    53 000000F6 488B3C25[4F000000]  <2>  mov rdi, [bitflags]
    53 000000FE E8(00000000)        <2>  call printb
    53                              <2> 
    53                              <2>  %assign I I+1
    53                              <2>  %rotate 2
    53                              <2>  PR1 fmt, msgI
    53 00000103 48BF-               <3>  mov rdi, %1
    53 00000105 [0000000000000000]  <3>
    53 0000010D 48BE-               <3>  mov rsi, %2
    53 0000010F [3200000000000000]  <3>
    53 00000117 4831C0              <3>  xor rax, rax
    53 0000011A E8(00000000)        <3>  call printf
    53 0000011F 480FBA3425-         <2>  bt%1 qword[bitflags], %2
    53 00000124 [4F000000]08        <2>
    53 00000129 488B3C25[4F000000]  <2>  mov rdi, [bitflags]
    53 00000131 E8(00000000)        <2>  call printb
    53                              <2> 
    53                              <2>  %assign I I+1
    53                              <2>  %rotate 2
    54                                  
    55                                      ; test 61, will set CF
    56                                      PR1 fmt, msg7
    56 00000136 48BF-               <1>  mov rdi, %1
    56 00000138 [0000000000000000]  <1>
    56 00000140 48BE-               <1>  mov rsi, %2
    56 00000142 [3C00000000000000]  <1>
    56 0000014A 4831C0              <1>  xor rax, rax
    56 0000014D E8(00000000)        <1>  call printf
    57                                      
    58 00000152 4831FF                      xor rdi, rdi
    59 00000155 B83D000000                  mov rax, 61
    60 0000015A 4831FF                      xor rdi, rdi
    61 0000015D 480FA30425-                 bt [bitflags], rax ; test bit
    61 00000162 [4F000000]         
    62 00000166 400F92C7                    setc dil ; set dil(=low rdi) to 1 if CF is set
    63 0000016A E8(00000000)                call printb
    64                                  
    65                                  MAIN_EPILO_EXIT0
    65 0000016F 4889EC              <1>  mov rsp, rbp
    65 00000172 5D                  <1>  pop rbp
    65 00000173 B83C000000          <1>  mov rax, 60
    65 00000178 4831FF              <1>  xor rdi, rdi
    65 0000017B 0F05                <1>  syscall
    66                                  ; main:
    67                                  
    68                                  
    69                                  
    70                                  
