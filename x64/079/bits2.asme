                               %line 1+1 bits2.asm
                               %line 1+1 ../inc/common.inc
                               %line 10+1 ../inc/common.inc
                               %line 17+1 ../inc/common.inc
                               %line 24+1 ../inc/common.inc
nil equ 0
nl equ 10
                               %line 37+1 ../inc/common.inc
                               %line 43+1 ../inc/common.inc
                               %line 51+1 ../inc/common.inc
[extern printf]
                               %line 67+1 ../inc/common.inc
                               %line 76+1 ../inc/common.inc
                               %line 86+1 ../inc/common.inc
                               %line 97+1 ../inc/common.inc
                               %line 103+1 ../inc/common.inc
                               %line 111+1 ../inc/common.inc
                               %line 5+1 bits2.asm
[global main]
[section .data]
 fmt db "N: %ld: %s: %ld", nl,nil
                               %line 24+1 bits2.asm
                               %line 28+1 bits2.asm
 msg1 db "SHL 2 = OK * 4", nil
                               %line 28+0 bits2.asm
 msg2 db "SHL 2 = BAD * 4", nil
 msg3 db "SAL 2 = OK * 4", nil
 msg4 db "SAL 2 = OK  * 4", nil
 msg5 db "SHR 2 = OK / 4", nil
 msg6 db "SHR 2 = BAD / 4", nil
 msg7 db "SAR 2 = OK / 4", nil
 msg8 db "SAR 2 = OK  / 4", nil
                               %line 29+1 bits2.asm
 n1 dq 8
 n2 dq -8
 res dq 0
[section .bss]
[section .text]
main:
 push rbp
                               %line 40+0 bits2.asm
 mov rbp, rsp
                               %line 41+1 bits2.asm
                               %line 54+1 bits2.asm
                               %line 58+1 bits2.asm
 mov rax, [n1]
                               %line 58+0 bits2.asm
 shl rax, 2
 mov [res], rax
 mov rdi, fmt
 mov rsi, [n1]
 mov rdx, msg1
 mov rcx, [res]
 xor rax, rax
 call printf
 mov rax, [n2]
 shl rax, 2
 mov [res], rax
 mov rdi, fmt
 mov rsi, [n2]
 mov rdx, msg2
 mov rcx, [res]
 xor rax, rax
 call printf
 mov rax, [n1]
 sal rax, 2
 mov [res], rax
 mov rdi, fmt
 mov rsi, [n1]
 mov rdx, msg3
 mov rcx, [res]
 xor rax, rax
 call printf
 mov rax, [n2]
 sal rax, 2
 mov [res], rax
 mov rdi, fmt
 mov rsi, [n2]
 mov rdx, msg4
 mov rcx, [res]
 xor rax, rax
 call printf
 mov rax, [n1]
 shr rax, 2
 mov [res], rax
 mov rdi, fmt
 mov rsi, [n1]
 mov rdx, msg5
 mov rcx, [res]
 xor rax, rax
 call printf
 mov rax, [n2]
 shr rax, 2
 mov [res], rax
 mov rdi, fmt
 mov rsi, [n2]
 mov rdx, msg6
 mov rcx, [res]
 xor rax, rax
 call printf
 mov rax, [n1]
 sar rax, 2
 mov [res], rax
 mov rdi, fmt
 mov rsi, [n1]
 mov rdx, msg7
 mov rcx, [res]
 xor rax, rax
 call printf
 mov rax, [n2]
 sar rax, 2
 mov [res], rax
 mov rdi, fmt
 mov rsi, [n2]
 mov rdx, msg8
 mov rcx, [res]
 xor rax, rax
 call printf
                               %line 59+1 bits2.asm
 mov rsp, rbp
                               %line 61+0 bits2.asm
 pop rbp
 mov rax, 60
 xor rdi, rdi
 syscall
                               %line 62+1 bits2.asm
